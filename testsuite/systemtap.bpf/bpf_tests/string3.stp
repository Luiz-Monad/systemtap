// stapbpf string manipulation -- store string in global from kernel space
// XXX: the 'locking' scheme here is kind of dumb but it seems to work

global counter = 0
global var
global tab1
global tab2

probe begin {
  printf("BEGIN\n")
}

probe kernel.function("vfs_read") {
  if (counter == 0) {
    var = "str1"
    tab1[0] = "str2"
    tab2["key"] = "str3"
    printf("read1[[%s]]\n", var)
    counter = 1
  }
}

probe kernel.function("vfs_read") {
  if (counter == 1) {
    printf("read2[%s]\n", "str0")
    printf("read2{%s}\n", var)
    printf("read2<%s>\n", tab1[0])
    printf("read2(%s)\n", tab2["key"])
    exit()
  }
}

probe end {
  printf("[%s]\n", "str0")
  printf("{%s}\n", var)
  printf("<%s>\n", tab1[0])
  printf("(%s)\n", tab2["key"])
  printf("END PASS\n") // TODO check output string in bpf.exp
}
