set test "exit"
set testpath "$srcdir/$subdir"

if {! [installtest_p]} { untested "$test"; return }

# --- TEST 1 ---

set subtest1 "TEST 1: exit() in the middle of a func body"
foreach runtime [get_runtime_list] {
    if {$runtime eq ""} {
        set runtime "kernel"
    }
    set test_name "$test: $subtest1 ($runtime)"

    set cmd "stap --runtime=$runtime '$srcdir/$subdir/${test}_1.stp'"
    send_log "executing: $cmd\n"
    set pipe [open "| sh -c {$cmd}" r]
    set out [read $pipe]
    set failed 0
    if {[catch {close $pipe} stderr] != 0} {
        if {$stderr ne "" && [string index $stderr end] ne "\n"} {
            append stderr "\n"
        }
        global errorCode
        if {"CHILDSTATUS" == [lindex $errorCode 0]} {
            set failed [lindex $errorCode 2]
        }
    }

    set exp_out "enter f
leave f
exit
"
    regsub -all -- {\n} $exp_out {\n} escaped_exp_out
    if {$out eq $exp_out} {
        pass "${test_name}: stdout matches \"$escaped_exp_out\""
    } else {
        fail "${test_name}: stdout fails to match \"$escaped_exp_out\": got \"$out\""
    }

    if {$failed} {
        fail "${test_name}: exit code should be zero but is $failed"
    } else {
        pass "${test_name}: exit code is zero"
    }
    if {$stderr ne ""} {
        send_log "stderr:\n$stderr"
    }
}

# --- TEST 2 ---

set subtest2 "TEST 2: exit() in the middle of a func body in a deeper func call chain"
foreach runtime [get_runtime_list] {
    if {$runtime eq ""} {
        set runtime "kernel"
    }
    set test_name "$test: $subtest2 ($runtime)"

    set cmd "stap --runtime=$runtime '$srcdir/$subdir/${test}_2.stp'"
    send_log "executing: $cmd\n"
    set pipe [open "| sh -c {$cmd}" r]
    set out [read $pipe]
    set failed 0
    if {[catch {close $pipe} stderr] != 0} {
        if {$stderr ne "" && [string index $stderr end] ne "\n"} {
            append stderr "\n"
        }
        global errorCode
        if {"CHILDSTATUS" == [lindex $errorCode 0]} {
            set failed [lindex $errorCode 2]
        }
    }

    set exp_out "enter g
enter f
leave f
leave g
exit
"
    regsub -all -- {\n} $exp_out {\n} escaped_exp_out
    if {$out eq $exp_out} {
        pass "${test_name}: stdout matches \"$escaped_exp_out\""
    } else {
        fail "${test_name}: stdout fails to match \"$escaped_exp_out\": got \"$out\""
    }

    if {$failed} {
        fail "${test_name}: exit code should be zero but is $failed"
    } else {
        pass "${test_name}: exit code is zero"
    }
    if {$stderr ne ""} {
        send_log "stderr:\n$stderr"
    }
}

# --- TEST 3 ---

set subtest3 "TEST 3: exit() in the middle of a probe handler body"
foreach runtime [get_runtime_list] {
    if {$runtime eq ""} {
        set runtime "kernel"
    }
    set test_name "$test: $subtest3 ($runtime)"

    set cmd "stap --runtime=$runtime '$srcdir/$subdir/${test}_3.stp'"
    send_log "executing: $cmd\n"
    set pipe [open "| sh -c {$cmd}" r]
    set out [read $pipe]
    set failed 0
    if {[catch {close $pipe} stderr] != 0} {
        if {$stderr ne "" && [string index $stderr end] ne "\n"} {
            append stderr "\n"
        }
        global errorCode
        if {"CHILDSTATUS" == [lindex $errorCode 0]} {
            set failed [lindex $errorCode 2]
        }
    }

    set exp_out "enter probe
leave probe
"
    regsub -all -- {\n} $exp_out {\n} escaped_exp_out
    if {$out eq $exp_out} {
        pass "${test_name}: stdout matches \"$escaped_exp_out\""
    } else {
        fail "${test_name}: stdout fails to match \"$escaped_exp_out\": got \"$out\""
    }

    if {$failed} {
        fail "${test_name}: exit code should be zero but is $failed"
    } else {
        pass "${test_name}: exit code is zero"
    }
    if {$stderr ne ""} {
        send_log "stderr:\n$stderr"
    }
}
